{"version":3,"sources":["locale/strings.js","logo.svg","hooks/useWindowsdimensions.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["module","exports","getWindowDimensions","window","width","innerWidth","height","innerHeight","BarChartComponent","pokimons","t","useIntl","formatMessage","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","Container","style","padding","marginBottom","id","data","map","pokimon","name","margin","top","right","left","bottom","strokeDasharray","dataKey","interval","fill","App","intl","messages","strings","locale","setData","a","navigator","onLine","JSON","parse","localStorage","getItem","axios","get","response","setItem","stringify","fetchData","Table","striped","bordered","index","number","src","ThumbnailImage","alt","description","weight","type","Badge","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","userLanguage","language","split","ReactDOM","render","StrictMode","defaultLocale","document","getElementById","URL","process","href","origin","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c9c24cca.chunk.js","sourcesContent":["module.exports = {\r\n  \"en\": {\r\n    \"imageHeader\": \"Image\",\r\n    \"nameHeader\": \"Name\",\r\n    \"descriptionHeader\": \"Description\",\r\n    \"heightHeader\": \"Height\",\r\n    \"weightHeader\": \"Weight\",\r\n    \"typeHeader\": \"Type\",\r\n    \"heightTitle\": \"Pokemon's height\"\r\n  },\r\n  \"es\": {\r\n      \"imageHeader\": \"Imagen\",\r\n      \"nameHeader\": \"Nombre\",\r\n      \"descriptionHeader\": \"DescripciÃ³n\",\r\n      \"heightHeader\": \"Altura\",\r\n      \"weightHeader\": \"Peso\",\r\n      \"typeHeader\": \"Tipo\",\r\n      \"heightTitle\": \"Altura de los pokemon\"\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {IntlProvider, useIntl, FormattedMessage} from 'react-intl';\r\nimport strings from './locale/strings';\r\nimport { Badge, Container, Table } from \"react-bootstrap\";\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport axios from 'axios';\r\nimport useWindowDimensions from './hooks/useWindowsdimensions';\r\nimport {\r\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\n\r\nfunction App() {\r\n  const defaultLocale = \"en\";\r\n  const intl = useIntl();\r\n  const t = intl.formatMessage;\r\n  let messages = strings[intl.locale];\r\n  if (!messages) {\r\n    messages = strings[defaultLocale];\r\n  }\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      if(!navigator.onLine) {\r\n        setData(JSON.parse(localStorage.getItem('pokimons') ?? '{}'));\r\n      } else {\r\n        try {\r\n          let data = [];\r\n          if(intl.locale === \"es\") {\r\n            const response = await axios.get('https://gist.githubusercontent.com/jhonatan89/e379fadf8ed0f5381a2d8f8f3dea90c3/raw/e2bc20df02828d297f99558551e37959ac97a6f8/pokemon-es.json');\r\n            data = response.data;\r\n          } else {\r\n            const response = await axios.get('https://gist.githubusercontent.com/jhonatan89/2089276d3ce0faceff8e55fc3459b818/raw/30ee1a77b3e328108faaaa9aaac6f2ddaa3d3711/pokemons-en.json');\r\n            data = response.data;\r\n          }\r\n          localStorage.setItem('pokimons', JSON.stringify(data));\r\n          setData(data);\r\n        }\r\n        catch(error) {\r\n          setData(JSON.parse(localStorage.getItem('pokimons') ?? '{}'));\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n      <Container id=\"contenedorOP\">\r\n        <Table striped bordered>\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                #\r\n              </th>\r\n              <th>\r\n                {t({id: 'imageHeader'})}\r\n              </th>\r\n              <th>\r\n                {t({id: 'nameHeader'})}\r\n              </th>\r\n              <th>\r\n                {t({id: 'descriptionHeader'})}\r\n              </th>\r\n              <th>\r\n                {t({id: 'heightHeader'})}\r\n              </th>\r\n              <th>\r\n                {t({id: 'weightHeader'})}\r\n              </th>\r\n              <th>\r\n                {t({id: 'typeHeader'})}\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((pokimon, index) => \r\n              <tr key={index}>\r\n                <td>\r\n                  {pokimon.number}\r\n                </td>\r\n                <td>\r\n                  <img src={pokimon.ThumbnailImage} alt={pokimon.name}></img>\r\n                </td>\r\n                <td>\r\n                  {pokimon.name}\r\n                </td>\r\n                <td>\r\n                  {pokimon.description}\r\n                </td>\r\n                <td>\r\n                  {pokimon.height}\r\n                </td>\r\n                <td>\r\n                  {pokimon.weight}\r\n                </td>\r\n                <td>\r\n                  {pokimon.type.map(type => \r\n                    <Badge key={`${type}${index}`} variant=\"secondary\">{type}</Badge>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            )\r\n            }\r\n          </tbody>\r\n        </Table>\r\n        {navigator.onLine && (\r\n          <BarChartComponent pokimons={data} />\r\n        )}\r\n      </Container>\r\n  );\r\n}\r\n\r\nconst BarChartComponent = ({ pokimons }) => {\r\n  const intl = useIntl();\r\n  const t = intl.formatMessage;\r\n  const { width } = useWindowDimensions();\r\n  let chartWidth = 1140;\r\n  /*if(width > 1200) {\r\n    chartWidth = 1140;\r\n  } else if(width > 992) {\r\n    chartWidth = 920;\r\n  } else if (width > 768) {\r\n    chartWidth = 720;\r\n  } else if (width > 576) {\r\n    chartWidth = 540;\r\n  } else {\r\n    chartWidth = width;\r\n  }*/\r\n  return (\r\n    <Container style={{height: '400px', width: \"100%\", padding: '0px', marginBottom: '24px'}}>\r\n      <h5>{t({id: 'heightTitle'})}</h5>\r\n      <BarChart\r\n        width={chartWidth}\r\n        height={300}\r\n        data={pokimons.map(pokimon => ({name: pokimon.name, height: pokimon.height}))}\r\n        margin={{\r\n          top: 5, right: 30, left: 20, bottom: 35,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" interval={0} />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Bar dataKey=\"height\" fill=\"#8884d8\" />\r\n      </BarChart>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { IntlProvider } from 'react-intl';\r\nimport strings from './locale/strings';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\n\r\nlet userLanguage = navigator.language || navigator.userLanguage;\r\nuserLanguage = userLanguage.split('-')[0];\r\nlet messages = strings[userLanguage] ?? strings[\"en\"];\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <IntlProvider\r\n     locale={userLanguage}\r\n     defaultLocale=\"en\"\r\n     messages={messages}>\r\n    <App />\r\n    </IntlProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}