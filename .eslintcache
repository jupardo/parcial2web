[{"C:\\Users\\julip\\parcial2\\p2\\src\\index.js":"1","C:\\Users\\julip\\parcial2\\p2\\src\\App.js":"2","C:\\Users\\julip\\parcial2\\p2\\src\\reportWebVitals.js":"3","C:\\Users\\julip\\parcial2\\p2\\src\\locale\\strings.js":"4","C:\\Users\\julip\\parcial2\\p2\\src\\hooks\\useWindowsdimensions.js":"5","C:\\Users\\julip\\parcial2\\p2\\src\\serviceWorkerRegistration.js":"6"},{"size":1021,"mtime":1607137127087,"results":"7","hashOfConfig":"8"},{"size":4411,"mtime":1607134210851,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607121177060,"results":"10","hashOfConfig":"8"},{"size":525,"mtime":1607129205910,"results":"11","hashOfConfig":"8"},{"size":606,"mtime":1607133320882,"results":"12","hashOfConfig":"8"},{"size":5195,"mtime":1607136938067,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tit3j2",{"filePath":"16","messages":"17","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\julip\\parcial2\\p2\\src\\index.js",[],"C:\\Users\\julip\\parcial2\\p2\\src\\App.js",["28","29","30","31","32","33","34","35"],"import logo from './logo.svg';\nimport './App.css';\nimport {IntlProvider, useIntl, FormattedMessage} from 'react-intl';\nimport strings from './locale/strings';\nimport { Badge, Container, Table } from \"react-bootstrap\";\nimport { useEffect, useMemo, useState } from 'react';\nimport axios from 'axios';\nimport useWindowDimensions from './hooks/useWindowsdimensions';\nimport {\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nfunction App() {\n  const defaultLocale = \"en\";\n  const intl = useIntl();\n  const t = intl.formatMessage;\n  let messages = strings[intl.locale];\n  if (!messages) {\n    messages = strings[defaultLocale];\n  }\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      if(!navigator.onLine) {\n        setData(JSON.parse(localStorage.getItem('pokimons') ?? '{}'));\n      } else {\n        try {\n          let data = [];\n          if(intl.locale === \"es\") {\n            const response = await axios.get('https://gist.githubusercontent.com/jhonatan89/e379fadf8ed0f5381a2d8f8f3dea90c3/raw/e2bc20df02828d297f99558551e37959ac97a6f8/pokemon-es.json');\n            data = response.data;\n          } else {\n            const response = await axios.get('https://gist.githubusercontent.com/jhonatan89/2089276d3ce0faceff8e55fc3459b818/raw/30ee1a77b3e328108faaaa9aaac6f2ddaa3d3711/pokemons-en.json');\n            data = response.data;\n          }\n          localStorage.setItem('pokimons', JSON.stringify(data));\n          setData(data);\n        }\n        catch(error) {\n          setData(JSON.parse(localStorage.getItem('pokimons') ?? '{}'));\n        }\n      }\n    }\n    fetchData();\n  }, []);\n  return (\n      <Container id=\"contenedorOP\">\n        <Table striped bordered>\n          <thead>\n            <tr>\n              <th>\n                #\n              </th>\n              <th>\n                {t({id: 'imageHeader'})}\n              </th>\n              <th>\n                {t({id: 'nameHeader'})}\n              </th>\n              <th>\n                {t({id: 'descriptionHeader'})}\n              </th>\n              <th>\n                {t({id: 'heightHeader'})}\n              </th>\n              <th>\n                {t({id: 'weightHeader'})}\n              </th>\n              <th>\n                {t({id: 'typeHeader'})}\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((pokimon, index) => \n              <tr key={index}>\n                <td>\n                  {pokimon.number}\n                </td>\n                <td>\n                  <img src={pokimon.ThumbnailImage} alt={pokimon.name}></img>\n                </td>\n                <td>\n                  {pokimon.name}\n                </td>\n                <td>\n                  {pokimon.description}\n                </td>\n                <td>\n                  {pokimon.height}\n                </td>\n                <td>\n                  {pokimon.weight}\n                </td>\n                <td>\n                  {pokimon.type.map(type => \n                    <Badge key={`${type}${index}`} variant=\"secondary\">{type}</Badge>\n                  )}\n                </td>\n              </tr>\n            )\n            }\n          </tbody>\n        </Table>\n        {navigator.onLine && (\n          <BarChartComponent pokimons={data} />\n        )}\n      </Container>\n  );\n}\n\nconst BarChartComponent = ({ pokimons }) => {\n  const intl = useIntl();\n  const t = intl.formatMessage;\n  const { width } = useWindowDimensions();\n  let chartWidth = 1140;\n  /*if(width > 1200) {\n    chartWidth = 1140;\n  } else if(width > 992) {\n    chartWidth = 920;\n  } else if (width > 768) {\n    chartWidth = 720;\n  } else if (width > 576) {\n    chartWidth = 540;\n  } else {\n    chartWidth = width;\n  }*/\n  return (\n    <Container style={{height: '400px', width: \"100%\", padding: '0px', marginBottom: '24px'}}>\n      <h5>{t({id: 'heightTitle'})}</h5>\n      <BarChart\n        width={chartWidth}\n        height={300}\n        data={pokimons.map(pokimon => ({name: pokimon.name, height: pokimon.height}))}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 35,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" interval={0} />\n        <YAxis />\n        <Tooltip />\n        <Bar dataKey=\"height\" fill=\"#8884d8\" />\n      </BarChart>\n    </Container>\n  );\n}\n\nexport default App;\n",["36","37"],"C:\\Users\\julip\\parcial2\\p2\\src\\reportWebVitals.js",[],"C:\\Users\\julip\\parcial2\\p2\\src\\locale\\strings.js",[],"C:\\Users\\julip\\parcial2\\p2\\src\\hooks\\useWindowsdimensions.js",[],"C:\\Users\\julip\\parcial2\\p2\\src\\serviceWorkerRegistration.js",[],{"ruleId":"38","severity":1,"message":"39","line":1,"column":8,"nodeType":"40","messageId":"41","endLine":1,"endColumn":12},{"ruleId":"38","severity":1,"message":"42","line":3,"column":9,"nodeType":"40","messageId":"41","endLine":3,"endColumn":21},{"ruleId":"38","severity":1,"message":"43","line":3,"column":32,"nodeType":"40","messageId":"41","endLine":3,"endColumn":48},{"ruleId":"38","severity":1,"message":"44","line":6,"column":21,"nodeType":"40","messageId":"41","endLine":6,"endColumn":28},{"ruleId":"38","severity":1,"message":"45","line":10,"column":18,"nodeType":"40","messageId":"41","endLine":10,"endColumn":22},{"ruleId":"38","severity":1,"message":"46","line":10,"column":62,"nodeType":"40","messageId":"41","endLine":10,"endColumn":68},{"ruleId":"47","severity":1,"message":"48","line":45,"column":6,"nodeType":"49","endLine":45,"endColumn":8,"suggestions":"50"},{"ruleId":"38","severity":1,"message":"51","line":115,"column":11,"nodeType":"40","messageId":"41","endLine":115,"endColumn":16},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'IntlProvider' is defined but never used.","'FormattedMessage' is defined but never used.","'useMemo' is defined but never used.","'Cell' is defined but never used.","'Legend' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'intl.locale'. Either include it or remove the dependency array.","ArrayExpression",["56"],"'width' is assigned a value but never used.","no-native-reassign",["57"],"no-negated-in-lhs",["58"],{"desc":"59","fix":"60"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [intl.locale]",{"range":"61","text":"62"},[1673,1675],"[intl.locale]"]